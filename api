AIzaSyCXXJEXPULvwriS7txuJ4G-ZylTfD9ILzw


   SADA ME ZANIMA NAKON STO SAM KLIKNUO REZERVISI DA LI JE MOGUCE TU ZAKAZANU NARUDZBU PRIKAZATI NA STRANICI INDEXVOZAC.HTML?   DA JE STAVIS U OUTLINE BOX, DA JE ISCRTANA ISTA MAPA, ISPOD NJE DA PISE MJESTO POLASKA I MJESTO DOLASKA ODREDISTA KAKO VEC SE KAZE, CIJENA, DATUM I VRIJEME I ISPOD DUGME PRIHVATI,






   INDEXVOZAC.HTML                    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.13.0/firebase-app.js";
        import { getFirestore, collection, getDocs, query, where } from "https://www.gstatic.com/firebasejs/10.13.0/firebase-firestore.js";
        import { updateDoc, doc } from "https://www.gstatic.com/firebasejs/10.13.0/firebase-firestore.js";

        const firebaseConfig = {
            apiKey: "AIzaSyCMVaXV5cs-AISEpLRekEm_Rg-spQxadu4",
            authDomain: "gogo-54679.firebaseapp.com",
            projectId: "gogo-54679",
            storageBucket: "gogo-54679.appspot.com",
            messagingSenderId: "91592159827",
            appId: "1:91592159827:web:49f4caf5511b99b0a28ca6",
            measurementId: "G-SMREC5LJ12"
        };

        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        document.addEventListener('DOMContentLoaded', async () => {
    const userName = localStorage.getItem('userName') || 'Vozač';
    document.getElementById('userName').textContent = userName;

    // Fetch ride data from Firestore
    const querySnapshot = await getDocs(collection(db, 'voznja'));
    const ridesContainer = document.getElementById('rides-container');
    ridesContainer.innerHTML = '';

    for (const doc of querySnapshot.docs) {
        const ride = doc.data();
        const { pickupLocation, destination, distance, duration, price, departureDate, departureTime } = ride;

        if (pickupLocation && destination) {
            // Create a new box for each ride
            const rideBox = document.createElement('div');
            rideBox.className = 'ride-box';
            rideBox.innerHTML = 
                <div class="ride-map" id="map-${doc.id}" style="height: 250px; width: 100%;"></div>
                <div class="ride-info">
                    <p>Ruta: ${pickupLocation} - ${destination}</p>
                    <p>Udaljenost: ${distance} km</p>
                    <p>Trajanje puta: ${duration}</p>
                    <p>Cijena: ${price} KM</p>
                    <p>Datum: ${departureDate}</p>
                    <p>Vrijeme: ${departureTime}</p>
                </div>
                 <div class="accept-box">
        <button class="accept-button" data-ride-id="${doc.id}">Prihvati</button>
    </div>
            ;
            ridesContainer.appendChild(rideBox);

            // Initialize map for the current ride
            const map = new google.maps.Map(document.getElementById(map-${doc.id}), {
                center: { lat: 43.8486, lng: 18.3564 }, // Default to Sarajevo
                zoom: 10
            });

            const directionsService = new google.maps.DirectionsService();
            const directionsRenderer = new google.maps.DirectionsRenderer();
            directionsRenderer.setMap(map);

            // Function to get coordinates from location name
            async function getGeocode(location) {
                const response = await fetch(https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(location)}&key=AIzaSyCXXJEXPULvwriS7txuJ4G-ZylTfD9ILzw);
                const data = await response.json();
                if (data.status === 'OK' && data.results.length > 0) {
                    const { lat, lng } = data.results[0].geometry.location;
                    return { lat, lng };
                }
                return null;
            }

            const pickupCoords = await getGeocode(pickupLocation);
            const destinationCoords = await getGeocode(destination);

            if (pickupCoords && destinationCoords) {
                // Add markers for pickup and destination
                new google.maps.Marker({
                    position: pickupCoords,
                    map: map,
                    title: 'Pickup Location'
                });

                new google.maps.Marker({
                    position: destinationCoords,
                    map: map,
                    title: 'Destination'
                });

                // Update map with route
                const request = {
                    origin: new google.maps.LatLng(pickupCoords.lat, pickupCoords.lng),
                    destination: new google.maps.LatLng(destinationCoords.lat, destinationCoords.lng),
                    travelMode: google.maps.TravelMode.DRIVING
                };

                directionsService.route(request, (result, status) => {
                    if (status === google.maps.DirectionsStatus.OK) {
                        directionsRenderer.setDirections(result);
                    } else {
                        console.error("Error displaying route: ", status);
                    }
                });
            }
        }
    }

    document.getElementById('logoutBtn').addEventListener('click', () => {
        localStorage.removeItem('userName');
        localStorage.removeItem('userType');
        document.getElementById('userName').textContent = '';
        document.getElementById('logoutBtn').style.display = 'none';
        document.getElementById('loginBtn').style.display = 'inline';
        document.getElementById('registerBtn').style.display = 'inline';
    });
});

document.addEventListener('DOMContentLoaded', () => {
    const userName = localStorage.getItem('userName');
    const userNameElement = document.getElementById('userName');
    const logoutBtn = document.getElementById('logoutBtn');
    const loginBtn = document.getElementById('loginBtn');
    const registerBtn = document.getElementById('registerBtn');

    if (userName) {
        // Ako je korisnik prijavljen, prikaži njegovo ime i dugme "Odjavi se"
        userNameElement.textContent = userName;
        logoutBtn.style.display = 'inline';
        loginBtn.style.display = 'none';
        registerBtn.style.display = 'none';
    } else {
        // Ako korisnik nije prijavljen, prikaži dugmad "Prijavi se" i "Registruj se"
        userNameElement.textContent = '';
        loginBtn.style.display = 'inline';
        registerBtn.style.display = 'inline';
        logoutBtn.style.display = 'none';
    }

    // Funkcionalnost za odjavu
    logoutBtn.addEventListener('click', () => {
        localStorage.removeItem('userName');
        localStorage.removeItem('userType');
        userNameElement.textContent = '';
        logoutBtn.style.display = 'none';
        loginBtn.style.display = 'inline';
        registerBtn.style.display = 'inline';
    });

    // Prikazivanje modala za prijavu
    loginBtn.addEventListener('click', () => {
        document.getElementById('loginModal').style.display = 'block';
    });

    // Zatvaranje modala
    document.getElementById('closeModal').addEventListener('click', () => {
        document.getElementById('loginModal').style.display = 'none';
    });

    // Prijava korisnika kroz modal
    document.getElementById('modalLoginForm').addEventListener('submit', async (event) => {
        event.preventDefault();

        const loginName = document.getElementById('modalLoginName').value.trim();
        const loginPassword = document.getElementById('modalLoginPassword').value.trim();

        if (!loginName || !loginPassword) {
            alert("Molimo unesite ime i šifru.");
            return;
        }

        try {
            const [firstName, lastName] = loginName.split(' ');

            // Provjera vozača u 'vozac' kolekciji
            const driverQuery = query(collection(db, 'vozac'), where('firstName', '==', firstName), where('lastName', '==', lastName), where('password', '==', loginPassword));
            const driverSnapshot = await getDocs(driverQuery);

            if (!driverSnapshot.empty) {
                // Uspješna prijava
                localStorage.setItem('userName', loginName);
                localStorage.setItem('userType', 'vozac');

                // Ažuriraj prikaz
                userNameElement.textContent = loginName;
                logoutBtn.style.display = 'inline';
                loginBtn.style.display = 'none';
                registerBtn.style.display = 'none';

                // Sakrij modal
                document.getElementById('loginModal').style.display = 'none';
            } else {
                alert("Neispravno ime ili šifra.");
            }
        } catch (error) {
            console.error("Greška prilikom preuzimanja dokumenta: ", error);
        }
    });
});

document.querySelector('#rides-container').addEventListener('click', async (event) => {
        if (event.target.classList.contains('accept-button')) {
            const rideId = event.target.getAttribute('data-ride-id');
            const userName = localStorage.getItem('userName');

            if (!userName) {
                alert('Morate biti prijavljeni kao vozač da biste prihvatili vožnju.');
                return;
            }

            try {
                const [firstName, lastName] = userName.split(' ');

                // Update the ride document with the driver's name
                await updateDoc(doc(db, 'voznja', rideId), {
                    acceptedBy: { firstName, lastName }
                });

                alert('Vožnja je prihvaćena.');
                location.reload(); // Reload the page to reflect the changes

            } catch (error) {
                console.error('Greška pri prihvatanju vožnje: ', error);
                alert('Došlo je do greške. Pokušajte ponovo.');
            }
        }
    });


    document.addEventListener('DOMContentLoaded', () => {
        const userName = localStorage.getItem('userName');
        const userNameElement = document.getElementById('userName');
        const logoutBtn = document.getElementById('logoutBtn');
        const loginBtn = document.getElementById('loginBtn');
        const registerBtn = document.getElementById('registerBtn');

        if (userName) {
            userNameElement.textContent = userName;
            logoutBtn.style.display = 'inline';
            loginBtn.style.display = 'none';
            registerBtn.style.display = 'none';
        } else {
            userNameElement.textContent = '';
            loginBtn.style.display = 'inline';
            registerBtn.style.display = 'inline';
            logoutBtn.style.display = 'none';
        }

        // Funkcionalnost za odjavu
        logoutBtn.addEventListener('click', () => {
            localStorage.removeItem('userName');
            localStorage.removeItem('userType');
            userNameElement.textContent = '';
            logoutBtn.style.display = 'none';
            loginBtn.style.display = 'inline';
            registerBtn.style.display = 'inline';
        });

        // Prikazivanje modala za prijavu
        loginBtn.addEventListener('click', () => {
            document.getElementById('loginModal').style.display = 'block';
        });

        // Zatvaranje modala
        document.getElementById('closeModal').addEventListener('click', () => {
            document.getElementById('loginModal').style.display = 'none';
        });
    });


    document.addEventListener('DOMContentLoaded', () => {
    const userName = localStorage.getItem('userName');
    const registerBtn = document.getElementById('registerBtn');

    if (!userName) {
        // Ako korisnik nije prijavljen, prikazati dugme "Registruj se"
        registerBtn.style.display = 'inline';

        // Dodaj događaj za klik na dugme "Registruj se"
        registerBtn.addEventListener('click', () => {
            window.location.href = 'registracija.html';
        });
    } else {
        // Ako je korisnik prijavljen, sakrij dugme "Registruj se"
        registerBtn.style.display = 'none';
    }
});

    </script>


<div id="loginModal" style="display: none;">
    <div id="loginModalContent">
        <span id="closeModal" style="cursor: pointer;">&times;</span>
        <h2>Prijavi se</h2>
        <form id="modalLoginForm">
            <label for="modalLoginName">Ime i Prezime</label>
            <input type="text" id="modalLoginName" required>
            <label for="modalLoginPassword">Šifra</label>
            <input type="password" id="modalLoginPassword" required>
            <button type="submit">Prijavi se</button>
        </form>
    </div>
</div>                            KADA PROCITAS NAPISI OK DA TI MOGU POSLATI DRUGI KOD



























INDEXKOR.HTML                          <script src="https://www.gstatic.com/firebasejs/9.14.0/firebase-app.js"></script>
<!-- Firebase Firestore SDK -->
<script src="https://www.gstatic.com/firebasejs/9.14.0/firebase-firestore.js"></script>

    
</head>
<body>
    <header class="header">
        <div class="header-logo">
            <img src="logo.png" alt="Logo">
        </div>
        <div class="header-info">
            <span id="userActions">
                <span id="userName"></span>
                <button id="logoutBtn" style="display: none;">Odjavi se</button>
                <button id="loginBtn" style="display: none;">Prijavi se</button>
                <button id="registerBtn" style="display: none;">Registruj se</button>
            </span>
        </div>
    </header>

    <!-- Modal za prijavu -->
    <div id="loginModal" style="display: none;">
        <div id="loginModalContent">
            <span id="closeModal" style="cursor: pointer;">&times;</span>
            <h2>Prijavi se</h2>
            <form id="modalLoginForm">
                <label for="modalLoginName">Ime i Prezime</label>
                <input type="text" id="modalLoginName" required>
                <label for="modalLoginPassword">Šifra</label>
                <input type="password" id="modalLoginPassword" required>
                <button type="submit">Prijavi se</button>
            </form>
        </div>
    </div>
    <div class="container">
        <!-- Gray Box -->
        <div class="gray-box">
            <img src="images/online-ordering-taxi-car-rent-and-sharing-using-service-mobile-application-png.webp" alt="Sample Image">
            <div class="text">
                <h2>Naslov Teksta</h2>
                <p>Ovo je neki tekst koji ide desno od slike. Možeš ovdje dodati više informacija, opis ili bilo šta drugo što želiš prikazati.</p>
            </div>
        </div>
        <!-- Outline box for location input -->
        <div class="outline-box">
            <h2>Unesi lokaciju preuzimanja</h2>
            <button id="open-map">Otvorite mapu</button>
            <div id="map-container" style="display:none;">
                <div id="map"></div>
                <div id="drive-selection">
                    <div id="car-icon"></div>
                    <p id="distance">Udaljenost: </p>
                    <p id="duration">Trajanje puta: </p>
                    <p id="price">Cijena puta: </p>
                    <p id="departure-time-date">Vrijeme polaska i datum: </p>
                    <button id="reserve-btn" style="display:none;">Rezerviši</button>
                </div>
            </div>
            
            <div class="outline-box">
                <h3>Planirajte svoj put</h3>
                <div class="route-box">
                    <label for="pickup-location">Mjesto preuzimanja</label>
                    <input type="text" id="pickup-location" placeholder="Unesite adresu preuzimanja">
                </div>
                <div class="route-box">
                    <label for="destination">Gdje idete?</label>
                    <input type="text" id="destination" placeholder="Unesite odredište">
                </div>
                <div class="route-box">
                    <label for="departure-date">Datum polaska</label>
                    <input type="text" id="departure-date" placeholder="dd.mm.yyyy" pattern="\d{2}/\d{2}/\d{4}">
                </div>
                <div class="route-box">
                    <label for="departure-time">Vrijeme polaska</label>
                    <input type="time" id="departure-time" step="60"> <!-- steps in seconds -->
                </div>
                <button id="continue-btn" style="display:none;">Nastavi</button>
            </div>
        </div>
        
       <!-- Firebase SDKs for Firebase products that you want to use -->
<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.13.0/firebase-app.js";
    import { getFirestore, collection, addDoc, getDocs, query, where } from "https://www.gstatic.com/firebasejs/10.13.0/firebase-firestore.js";
    import { getStorage, ref, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.13.0/firebase-storage.js";
    
    const firebaseConfig = {
      apiKey: "AIzaSyCMVaXV5cs-AISEpLRekEm_Rg-spQxadu4",
      authDomain: "gogo-54679.firebaseapp.com",
      projectId: "gogo-54679",
      storageBucket: "gogo-54679.appspot.com",
      messagingSenderId: "91592159827",
      appId: "1:91592159827:web:49f4caf5511b99b0a28ca6",
      measurementId: "G-SMREC5LJ12"
    };
    
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const storage = getStorage(app);
  
    document.getElementById('reserve-btn').addEventListener('click', async function() {
      if (currentRoute) {
        const pickupLocation = document.getElementById('pickup-location').value;
        const destination = document.getElementById('destination').value;
        const departureDate = formatDate(document.getElementById('departure-date').value);
        const departureTime = document.getElementById('departure-time').value;
        const route = currentRoute.routes[0].legs[0];
        const distance = route.distance.value / 1000; // Udaljenost u kilometrima
        const duration = route.duration.text;
        const price = distance * 1; // Cijena u KM (1 KM po kilometru)
  
        const userName = localStorage.getItem('userName') || 'Nepoznat korisnik'; // Koristi default vrijednost ako nije pronađeno
    


        try {
            await addDoc(collection(db, 'voznja'), {
        pickupLocation: pickupLocation,
        destination: destination,
        departureDate: departureDate,
        departureTime: departureTime,
        distance: distance.toFixed(2),
        duration: duration,
        price: price.toFixed(2),
        userName: userName // Dodaj ime i prezime u Firestore dokument
      });
          alert('Rezervacija je potvrđena i podaci su spremljeni!');
        } catch (error) {
          console.error('Error adding document: ', error);
          alert('Došlo je do greške pri spremanju podataka.');
        }
      }
    });
  
    function formatDate(dateStr) {
      const [day, month, year] = dateStr.split('.').map(Number);
      return ${day.toString().padStart(2, '0')}.${month.toString().padStart(2, '0')}.${year};
    }
  </script>
  
           

    <script>




     document.getElementById('userName').textContent = localStorage.getItem('userName') || 'Korisnik';

document.getElementById('logoutBtn').addEventListener('click', () => {
    localStorage.removeItem('userName');
    window.location.href = 'registracija.html';
});

document.getElementById('open-map').addEventListener('click', function() {
    document.getElementById('map-container').style.display = 'block';
});

let map;
let directionsService;
let directionsRenderer;
let currentRoute;

function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: 45.815, lng: 15.981 },
        zoom: 12
    });

    directionsService = new google.maps.DirectionsService();
    directionsRenderer = new google.maps.DirectionsRenderer();
    directionsRenderer.setMap(map);

    const pickupLocationInput = document.getElementById('pickup-location');
    const destinationInput = document.getElementById('destination');
    const departureDateInput = document.getElementById('departure-date');
    const departureTimeInput = document.getElementById('departure-time');
    const continueBtn = document.getElementById('continue-btn');
    const reserveBtn = document.getElementById('reserve-btn');

    pickupLocationInput.addEventListener('change', calculateAndDisplayRoute);
    destinationInput.addEventListener('change', calculateAndDisplayRoute);
    departureDateInput.addEventListener('change', calculateAndDisplayRoute);
    departureTimeInput.addEventListener('change', calculateAndDisplayRoute);

    continueBtn.addEventListener('click', function() {
        if (currentRoute) {
            document.getElementById('drive-selection').style.display = 'block';
            continueBtn.style.display = 'none';

            const route = currentRoute.routes[0].legs[0];
            const distance = route.distance.value / 1000; // Udaljenost u kilometrima
            const duration = route.duration.text;
            const price = distance * 1; // Cijena u KM (1 KM po kilometru)

            const departureDate = formatDate(departureDateInput.value);
            const departureTime = departureTimeInput.value;

            document.getElementById('distance').innerText = 'Udaljenost: ' + distance.toFixed(2) + ' km';
            document.getElementById('duration').innerText = 'Trajanje puta: ' + duration;
            document.getElementById('price').innerText = 'Cijena puta: ' + price.toFixed(2) + ' KM';
            document.getElementById('departure-time-date').innerText = 'Vrijeme polaska i datum: ' + departureDate + ' ' + departureTime;

            new google.maps.Marker({
                position: {
                    lat: (route.start_location.lat() + route.end_location.lat()) / 2,
                    lng: (route.start_location.lng() + route.end_location.lng()) / 2
                },
                map: map,
                icon: 'car-icon.png',
                title: 'Automobil'
            });

            // Prikazivanje dugmeta "Rezerviši"
            document.getElementById('reserve-btn').style.display = 'block';
        }
    });

   
}

function formatDate(dateStr) {
    const [day, month, year] = dateStr.split('.').map(Number);
    return ${day.toString().padStart(2, '0')}.${month.toString().padStart(2, '0')}.${year};
}

function calculateAndDisplayRoute() {
    const pickupLocation = document.getElementById('pickup-location').value;
    const destination = document.getElementById('destination').value;

    if (pickupLocation && destination) {
        directionsService.route({
            origin: pickupLocation,
            destination: destination,
            travelMode: google.maps.TravelMode.DRIVING
        }, (response, status) => {
            if (status === google.maps.DirectionsStatus.OK) {
                directionsRenderer.setDirections(response);
                currentRoute = response;
                document.getElementById('continue-btn').style.display = 'block';
            } else {
                console.error('Directions request failed due to ' + status);
                alert('Ne možemo pronaći putanju. Provjerite unesene adrese.');
            }
        });
    }
}

window.onload = initMap;                                                              SVE ODLICNO RADI, ZELIM DA KADA U INDEXVOZAC KLIKNEM PRIHVATI ONDA DA DODJE OBAVIJEST NA INDEXKOR.HTML ONOM KORISNIKU KOJI JE REZERVISAO VOZNJU, DA MI DODJE OBAVIJEST I DA PISE VASA VOZNJA JE PRIHVACENA, VAS VOZAC JE .... I NAPISES IME I PREZIME ONOGA KO JE PRIHVATIO VOZNJU












dakle kao korisnik na indexkor.html objavim voznju, to sve zavrsi u kolekciji voznja sa svim parametrima(SUPER), kada odem na indexvozac.html tamo vidim sve voznje koje su razliciti korisnici objavili.          tu kao vozac kada kliknem na neku od tih voznji(svaka voznja je spasena u voznja kolekciji)   dobijem tekst voznja je prihvacena i u tu voznju koju sam prihvatio dodaje se podatak ime i prezime vozaca i u kolekciji pise Accepted by.......            DAKLE TO SVE RADI, samo treba da taj podatak nakon sto se voznja prihvati da onom korisniku koji je objavio tu voznju da mu dodje notifikaicja i da pise vasa voznja je prihvacena, vas vozac je(taj koji je prihvatio voznju ciji su podaci zavrsili u firestore)





promjenimo pristup, moras da shvatis kako funkcionise da bi mogli da ovo uradimo. dakle korisnik se loguje sa svojim imenom i prezimenom na indexkor.html i onda uradi rezervaciju voznje, ta voznja sa svim tim podacima se spasi u firestore kolekcija voznja(super sve radi), onda kada se vozac loguje sa svojim imenom i prezimenom na indexvozac.html i vidi sve objave od svih korisnika. onda vozac odabere jednu od ponudjenih i klipne prihvati, kada klikne prihvati njegovi podaci ime i prezime zavrse u istoj kolekciji voznja i vezan postane za direktno tu jednu voznju i tu dodatno pise accepted by pa sad stoji ime i prezime tog sto je prihvatio.   TO SVE RADI SVE FUNKCIONISE, TREBAMO RECI AKO JE VOZNJA VEC PRIHVACENA  TI PODACI MORAJU BITI JAVLJENI KORISNIKU KOJI JE OBJAVIO TU VOZNJU. DODJE MU NOTIFIKACIJA KADA SE LOGUJE SA SVOJIM IMENOM I PREZIMENOM GDJE CE PISATI VASA VOZNJA ZA TU I TU ADRESU(NAVEDES KOJU IMAS JE U FIRESTORE SPASENU) JE PRIHVACENA, VAS VOZAC JE(PA SAD STAVIS IME ONOGA KOJI JE PRIHVATIO A U FIRESTORE STOJI KAO ACCEPTED BY),        OVAKO IZGLEDA U FIRESTORE KADA NEKO PRIHVATI               acceptedBy
(map)

firstName
"Belmin"
(string)

lastName
"Henda"
(string)

departureDate
"10.02.2025"
(string)

departureTime
""
(string)

destination
"isaka samokovlije bb"
(string)

distance
"3.72"
(string)

duration
"10 mins"
(string)

pickupLocation
"pirin brijeg 2"
(string)

price
"3.72"
(string)

userName
"Nordin Hodžić"                                                      DAKLE SAMO DODATI NOTIFIKACIJU ONOME CIJA JE VOZNJA PRIHVACENA OD STRANE TOG I TOG